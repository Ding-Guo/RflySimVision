<launch>
  <!-- size of map, change the size inflate x, y, z according to your application -->
  <arg name="map_size_x"/>
  <arg name="map_size_y"/>
  <arg name="map_size_z"/>
  <arg name="init_x"/>
  <arg name="init_y"/>
  <arg name="init_z"/>
  <arg name="target0_x" default="0"/>
  <arg name="target0_y" default="0"/>
  <arg name="target0_z" default="0"/>
  <arg name="target1_x" default="0"/>
  <arg name="target1_y" default="0"/>
  <arg name="target1_z" default="0"/>  
  <arg name="target2_x" default="0"/>
  <arg name="target2_y" default="0"/>
  <arg name="target2_z" default="0"/>
  <arg name="target3_x" default="0"/>
  <arg name="target3_y" default="0"/>
  <arg name="target3_z" default="0"/>
  <arg name="target4_x" default="0"/>
  <arg name="target4_y" default="0"/>
  <arg name="target4_z" default="0"/>
  <arg name="virtual_ceil_height" default="0"/>
  <arg name="visualization_truncate_height" default="0"/>
  <arg name="point_num"/>

  <arg name="drone_id"/>

  <!-- topic of your odometry such as VIO or LIO -->
  <arg name="depth_topic"/>
  <!-- number of moving objects -->
  <arg name="obj_num" value="3" />

    <node pkg="rflysim_px4_node" name="drone_$(arg drone_id)_odom_local_2_global" type="odom_local_2_global" output="screen">
        <param name="init_x" value="$(arg init_x)"/>
        <param name="init_y" value="$(arg init_y)"/>
        <param name="init_z" value="$(arg init_z)"/>
        <remap from="~odom" to="uav$(arg drone_id)/mavros/local_position/odom"/>
        <remap from="~odometry" to="drone_$(arg drone_id)/odom"/>
    </node>

    <node pkg="rflysim_px4_node" name="drone_$(arg drone_id)_cmd_global_2_local" type="cmd_global_2_local" output="screen">
        <param name="init_x" value="$(arg init_x)"/>
        <param name="init_y" value="$(arg init_y)"/>
        <param name="init_z" value="$(arg init_z)"/>
        <remap from="~cmd" to="drone_$(arg drone_id)_planning/pos_cmd"/>
        <remap from="~command" to="drone_$(arg drone_id)_planning/pos_command"/>
    </node>
  <!-- main algorithm params -->
  <include file="$(find ego_planner)/launch/advanced_param.xml">

    <arg name="drone_id" value="$(arg drone_id)"/>

    <arg name="map_size_x_" value="$(arg map_size_x)"/>
    <arg name="map_size_y_" value="$(arg map_size_y)"/>
    <arg name="map_size_z_" value="$(arg map_size_z)"/>
    <arg name="odometry_topic" value="drone_$(arg drone_id)/odom"/>

    <arg name="obj_num_set" value="$(arg obj_num)" />
    <arg name="virtual_ceil_height"   value="$(arg virtual_ceil_height)"/>
    <arg name="visualization_truncate_height"   value="$(arg visualization_truncate_height)"/>

    <!-- camera pose: transform of camera frame in the world frame -->
    <!-- depth topic: depth image, 640x480 by default -->
    <!-- don't set cloud_topic if you already set these ones! -->
    <arg name="camera_pose_topic" value="pcl_render_node/camera_pose"/>
    <arg name="depth_topic" value="$(arg depth_topic)"/>

    <!-- topic of point cloud measurement, such as from LIDAR  -->
    <!-- don't set camera pose and depth, if you already set this one! -->
    <arg name="cloud_topic" value="pcl_render_node/cloud"/>

    <!-- intrinsic params of the depth camera -->
    <arg name="cx" value="320"/>
    <arg name="cy" value="240.0"/>
    <arg name="fx" value="328"/>
    <arg name="fy" value="327"/>

    <!-- maximum velocity and acceleration the drone will reach -->
    <arg name="max_vel" value="0.5" />
    <arg name="max_acc" value="1" />

    
    <!--always set to 1.5 times grater than sensing horizen-->
    <arg name="planning_horizon" value="7.5" />

    <arg name="use_distinctive_trajs" value="true" />

    <!-- 1: use 2D Nav Goal to select goal  -->
    <!-- 2: use global waypoints below  -->
    <arg name="flight_type" value="2" />
    
    <!-- global waypoints -->
    <!-- It generates a piecewise min-snap traj passing all waypoints -->
    <arg name="point_num" value="$(arg point_num)"/>

    <arg name="point0_x" value="$(arg target0_x)" />
    <arg name="point0_y" value="$(arg target0_y)" />
    <arg name="point0_z" value="$(arg target0_z)" />

    <arg name="point1_x" value="$(arg target1_x)" />
    <arg name="point1_y" value="$(arg target1_y)" />
    <arg name="point1_z" value="$(arg target1_z)" />

    <arg name="point2_x" value="$(arg target2_x)" />
    <arg name="point2_y" value="$(arg target2_y)" />
    <arg name="point2_z" value="$(arg target2_z)" />
    
    <arg name="point3_x" value="$(arg target3_x)" />
    <arg name="point3_y" value="$(arg target3_y)" />
    <arg name="point3_z" value="$(arg target3_z)" />    
    
    <arg name="point4_x" value="$(arg target4_x)" />
    <arg name="point4_y" value="$(arg target4_y)" />
    <arg name="point4_z" value="$(arg target4_z)" />
  </include>

 <!-- trajectory server -->
  <node pkg="ego_planner" name="drone_$(arg drone_id)_traj_server" type="traj_server" output="screen">
    <remap from="position_cmd" to="drone_$(arg drone_id)_planning/pos_cmd"/>
    <remap from="~planning/bspline" to="drone_$(arg drone_id)_planning/bspline"/>

    <param name="traj_server/time_forward" value="1.0" type="double"/>
  </node>


    <node pkg="odom_visualization" name="drone_$(arg drone_id)_odom_visualization" type="odom_visualization" output="screen">
        <remap from="~odom" to="drone_$(arg drone_id)/odom"/>
        <param name="color/a" value="1.0"/>
        <param name="color/r" value="0.0"/>
        <param name="color/g" value="0.0"/>
        <param name="color/b" value="0.0"/>
        <param name="covariance_scale" value="100.0"/>
        <param name="robot_scale" value="1.0"/>
        <param name="tf45" value="false"/>
        <param name="drone_id" value="drone_id"/>
    </node>
</launch>
